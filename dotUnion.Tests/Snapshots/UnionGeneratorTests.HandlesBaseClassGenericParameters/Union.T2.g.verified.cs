//HintName: Union.T2.g.cs
// <auto-generated/>
#nullable enable
using System;
using System.Threading.Tasks;

namespace dotUnion;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("dotUnion.SourceGenerator", "1.0.0")]
public abstract record Union<T, T1, T2>
	where T : Union<T, T1, T2> where T1 : T where T2 : T
{
	public TOut Match<TOut>(Func<T1, TOut> f1, Func<T2, TOut> f2) =>
		this switch
		{
			T1 t1 => f1(t1),
			T2 t2 => f2(t2),
			_ => throw new InvalidOperationException()
		};
	
	public Task<TOut> MatchAsync<TOut>(Func<T1, Task<TOut>> f1, Func<T2, Task<TOut>> f2) =>
		this switch
		{
			T1 t1 => f1(t1),
			T2 t2 => f2(t2),
			_ => throw new InvalidOperationException()
		};
	
	public ValueTask<TOut> MatchAsyncValue<TOut>(Func<T1, ValueTask<TOut>> f1, Func<T2, ValueTask<TOut>> f2) =>
		this switch
		{
			T1 t1 => f1(t1),
			T2 t2 => f2(t2),
			_ => throw new InvalidOperationException()
		};
	
	public void Switch(Action<T1> a1, Action<T2> a2)
	{
		switch (this)
		{
			case T1 t1: a1(t1); break;
			case T2 t2: a2(t2); break;
		}
	}
	
	public Task SwitchAsync(Func<T1, Task> a1, Func<T2, Task> a2) =>
		this switch
		{
			T1 t1 => a1(t1),
			T2 t2 => a2(t2),
			_ => throw new InvalidOperationException()
		};
	
	public ValueTask SwitchAsyncValue(Func<T1, ValueTask> a1, Func<T2, ValueTask> a2) =>
		this switch
		{
			T1 t1 => a1(t1),
			T2 t2 => a2(t2),
			_ => throw new InvalidOperationException()
		};
	
}

