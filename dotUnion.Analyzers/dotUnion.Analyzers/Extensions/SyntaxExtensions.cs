using System;
using System.IO;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;

namespace dotUnion.Analyzers.Extensions;

public static class SyntaxExtensions
{
	public static bool IsNonPublic(this BaseTypeDeclarationSyntax type)
		=> type.Modifiers.Any(IsNonPublicAccessibility);

	private static bool IsNonPublicAccessibility(this SyntaxToken token)
		=> token.Kind() is SyntaxKind.PrivateKeyword
		or SyntaxKind.InternalKeyword
		or SyntaxKind.ProtectedKeyword
		or SyntaxKind.FileKeyword;

	private static bool IsGeneratedFile(string filePath)
	{
		if (string.IsNullOrEmpty(filePath)) return false;

		string? fileName = Path.GetFileName(filePath);
		if (fileName.StartsWith(value: "TemporaryGeneratedFile_", StringComparison.OrdinalIgnoreCase)) return true;

		string? extension = Path.GetExtension(fileName);
		if (string.IsNullOrEmpty(extension)) return false;

		string? fileNameWithoutExtension = Path.GetFileNameWithoutExtension(fileName);
		return fileNameWithoutExtension.EndsWith(value: "AssemblyInfo", StringComparison.OrdinalIgnoreCase)
		|| fileNameWithoutExtension.EndsWith(value: ".designer", StringComparison.OrdinalIgnoreCase)
		|| fileNameWithoutExtension.EndsWith(value: ".g", StringComparison.OrdinalIgnoreCase)
		|| fileNameWithoutExtension.EndsWith(value: ".g.i", StringComparison.OrdinalIgnoreCase)
		|| fileNameWithoutExtension.EndsWith(value: ".AssemblyAttributes", StringComparison.OrdinalIgnoreCase);
	}

	public static bool IsGeneratedCode(this SyntaxTree tree, CancellationToken cancellationToken)
		=> IsGeneratedFile(tree.FilePath) || BeginsWithAutoGeneratedComment(tree, cancellationToken);

	private static bool BeginsWithAutoGeneratedComment(SyntaxTree tree, CancellationToken cancellationToken)
	{
		SyntaxNode root = tree.GetRoot(cancellationToken: cancellationToken);

		if (!root.IsKind(kind: SyntaxKind.CompilationUnit) || !root.HasLeadingTrivia) return false;

		SyntaxTriviaList leadingTrivia = root.GetLeadingTrivia();

		foreach (SyntaxTrivia trivia in leadingTrivia)
		{
			if (!trivia.IsKind(kind: SyntaxKind.SingleLineCommentTrivia)) continue;

			var text = trivia.ToString();

			if (text.Length < 2 || text[0] != '/' || text[1] != '/') continue;

			// Scan past whitespace.
			var index = 2;
			while (index < text.Length && char.IsWhiteSpace(c: text[index])) index++;

			// Check to see if the text of the comment starts with "<auto-generated".
			const string autoGenerated = "<auto-generated";

			return string.Compare(
				strA: text,
				indexA: index,
				strB: autoGenerated,
				indexB: 0,
				length: autoGenerated.Length,
				comparisonType: StringComparison.OrdinalIgnoreCase
			) is 0;
		}

		return false;
	}
}
