using System.CodeDom.Compiler;
using System.Text;
using dotUnion.SourceGenerator.Extensions;
using dotUnion.SourceGenerator.Model;
using Microsoft.CodeAnalysis;

namespace dotUnion.SourceGenerator.Composers;

public static class UnionSourceComposer
{
	public static void BuildUnion(SourceProductionContext context, (UnionTarget, GeneratorOptions) input)
	{
		(UnionTarget unionModel, GeneratorOptions options) = input;

		if (unionModel is null) return;

		var canAddImplicitOperators = true;

		Dictionary<string, UnionTargetMember> distinctMembers = [];
		foreach (UnionTargetMember member in unionModel.Members)
		{
			if (member.Constructor?.Parameters.Any() != true) continue;

			if (distinctMembers.ContainsKey(member.Constructor.TupleSignature))
			{
				canAddImplicitOperators = false;
				continue;
			}

			distinctMembers[member.Constructor.TupleSignature] = member;
		}


		using var output = new StringWriter();
		using var writer = new IndentedTextWriter(writer: output, tabString: "\t");

		writer.WriteLine("// <auto-generated/>");

		writer.WriteLine("#nullable enable");
		writer.WriteLine("using dotUnion;");

		foreach (string usingDirective in unionModel.UsingDirectives) writer.WriteLine($"{usingDirective}");

		StringBuilder? qualificationBuilder = null;

		if (options.GenerateAsyncExtensions)
		{
			qualificationBuilder = new StringBuilder();
			writer.WriteLine("using System.Threading.Tasks;");
		}

		writer.WriteLine();
		writer.WriteLine($"namespace {unionModel.Namespace};");
		writer.WriteLine();

		ParentType? parent = unionModel.ParentType;
		var parentCount = 0;


		while (parent is not null)
		{
			qualificationBuilder?.Append(parent.Name + '.');

			writer.WriteLine($"partial {parent.Keyword} {parent.Name} {parent.Constraints}");
			writer.WriteLine('{');
			writer.Indent++;
			parentCount++;
			parent = parent.Child;
		}

		writer.WriteLine($"abstract partial record {unionModel.FullName} : {unionModel.BaseUnion}");

		writer.WriteLine('{');
		writer.Indent++;

		writer.WriteLine($"private {unionModel.Name}() {{ }}");
		writer.WriteLine();

		foreach (UnionTargetMember member in unionModel.Members)
		{
			writer.WriteLine($"public sealed partial record {member.Name} : {unionModel.FullName};");
			writer.WriteLine();
		}

		if (canAddImplicitOperators)
			foreach ((string tuple, UnionTargetMember member) in distinctMembers)
			{
				if (member.Constructor is null) continue;

				if (member.Constructor.Parameters.Count() > 1)
					writer.WriteLine(
						$"public static implicit operator {unionModel.FullName}"
					+ $"({tuple} tuple)"
					+ $" => new {member.Name}({member.TupleConstructor});"
					);
				else
				{
					writer.WriteLine($"public static implicit operator {unionModel.FullName}{member.Constructor}");
					writer.WriteLine($"=> new {member.Name}{member.Constructor.ParametersSignature};");
				}

				writer.WriteLine();
			}

		writer.Indent--;
		writer.WriteLine('}');

		for (var i = 0; i < parentCount; i++)
		{
			writer.Indent--;
			writer.WriteLine('}');
		}

		writer.WriteLine();

		if (options.GenerateAsyncExtensions)
			WriteAsyncExtensions(
				writer: writer,
				unionModel: unionModel,
				qualification: qualificationBuilder?.ToString() ?? string.Empty
			);

		var generatedFileName = $"{unionModel.Name}.g.cs";
		context.AddSource(hintName: generatedFileName, source: output.ToString());
	}

	private static void WriteAsyncExtensions(
		IndentedTextWriter writer,
		UnionTarget unionModel,
		string qualification
	)
	{
		writer.WriteLine($"public static class {unionModel.Name}Ex");
		writer.WriteLine('{');
		writer.Indent++;

		string fullyQualifiedName = qualification + unionModel.FullName;

		writer.WriteLine($"public static async Task<{unionModel.BaseUnion}> Union{unionModel.GenericDeclaration}(this Task<{fullyQualifiedName}> task)");
		writer.WriteLine("=> await task.ConfigureAwait(false);");

		writer.WriteLine(
			$"public static async ValueTask<{unionModel.BaseUnion}> Union{unionModel.GenericDeclaration}(this ValueTask<{fullyQualifiedName}> valueTask)"
		);

		writer.WriteLine("=> await valueTask.ConfigureAwait(false);");

		writer.Indent--;
		writer.WriteLine('}');
	}
}
